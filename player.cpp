
#include "player.h"
#include "texture.h"
#include "sprite.h"
#include "keyboard.h"
#include "key_manager.h"
#include "game.h"

#define JUMP_POWER (35.0f)   //ジャンプの初速 (最高到達点がプレイヤーの高さ(100)になるよう設定)
#define JUMP_CORRECT (5.0f)  //ジャンプがブロック１個分ぎりぎりだと色々つらそうなので補正
#define PLAYER_SPEED (3.0f)  //プレイヤーの移動関数


/////////////////////////プレイヤー基底クラス///////////////////////////

// ---------------------------------------------------------------------------
// 関数名:	void player( void )
// 引数:	void
// 戻り値:  なし
// 説明:	プレイヤーの初期化関数
// ---------------------------------------------------------------------------
player::player() {

	//テクスチャ読込
	texture Texture;

	TexId = Texture.Texture_SetTextureLoadFile("asset/player.png");
	if (Texture.Texture_Load() > 0) {
		MessageBox(NULL, "テクスチャの読み込みに失敗", "エラー", MB_OK);
	}

	pos.x = pos.y = 0.0f;
	vector_speed.x = vector_speed.y = 0.0f;
	life = 1;
	speed = PLAYER_SPEED;
	isJump = true;
	jump_correct = 1.0f;
	gravity_correct = 1.0f;
}

// ---------------------------------------------------------------------------
// 関数名:	void player( D3DXVECTOR2 s_pos )
// 引数:	D3DXVECTOR2 s_pos
// 戻り値:  なし
// 説明:	プレイヤーの初期化関数
// ---------------------------------------------------------------------------
player::player(D3DXVECTOR2 s_pos) {

	texture Texture;

	//システム
	TexId = Texture.Texture_SetTextureLoadFile("asset/player.png");
	if (Texture.Texture_Load() > 0) {
		MessageBox(NULL, "テクスチャの読み込みに失敗", "エラー", MB_OK);
	}

	pos = s_pos;
	vector_speed.x = vector_speed.y = 0.0f;
	life = 1;
	speed = PLAYER_SPEED;
	isJump = true;
	jump_correct = 1.0f;
	gravity_correct = 1.0f;
}

// ---------------------------------------------------------------------------
// 関数名:	void Draw( void )
// 引数:	void
// 戻り値:  なし
// 説明:	プレイヤーの終了処理関数
// ---------------------------------------------------------------------------
player::~player() {



}


// ---------------------------------------------------------------------------
// 関数名:	void Draw( void )
// 引数:	void
// 戻り値:  なし
// 説明:	プレイヤーの更新関数
// ---------------------------------------------------------------------------
void player::Update() {

	past_pos = pos;

	//重力による加速
	PlayerGravity();

	//移動
	pos += vector_speed;

	//移動の補正
	if (pos.y > DOWN_LIMIT) {
		//pos.y = past_pos.y;
		pos.y = DOWN_LIMIT;

	}
	//下降しているときはisJumpをtrueにする(空中でジャンプできてしまうことの防止)
	if (vector_speed.y > 0 && pos.y < DOWN_LIMIT) isJump = true;


	vector_speed.x = 0.0f;

}

// ---------------------------------------------------------------------------
// 関数名:	void Draw( void )
// 引数:	void
// 戻り値:  なし
// 説明:	プレイヤーの描画関数
// ---------------------------------------------------------------------------
void player::Draw() {

	sprite Sprite;

	Sprite.Sprite_Draw(TexId,pos.x,pos.y,PLAYER_SIZE,PLAYER_SIZE);

}

// ---------------------------------------------------------------------------
// 関数名:	void moveX( void )
// 引数:	void
// 戻り値:  life
// 説明:	プレイヤーのライフ取得関数(未使用)
// ---------------------------------------------------------------------------
int player::Getlife() {

	return life;
}

// ---------------------------------------------------------------------------
// 関数名:	GetisJump 
// 引数:	void
// 戻り値:  isJump
// 説明:	プレイヤーのジャンプフラグ取得
// ---------------------------------------------------------------------------
bool player::GetisJump() {

	return isJump;
}

// ---------------------------------------------------------------------------
// 関数名:	GetVectorSpeed
// 引数:	void
// 戻り値:  vector_speed
// 説明:	プレイヤーの速度取得
// ---------------------------------------------------------------------------
D3DXVECTOR2 player::GetVectorSpeed() {

	return vector_speed;
}

// ---------------------------------------------------------------------------
// 関数名:	LifeControll(int num)
// 引数:	int
// 戻り値:  なし
// 説明:	プレイヤーのライフ操作(num分増減)
// ---------------------------------------------------------------------------
void player::LifeControll(int num) {

	life += num;
}

// ---------------------------------------------------------------------------
// 関数名:	VectorSpeedY_Maltiplication(float num)
// 引数:	num
// 戻り値:  なし
// 説明:	プレイヤーの速度操作(numをかける)
// ---------------------------------------------------------------------------
void player::VectorSpeedY_Maltiplication(float num) {

	vector_speed.y *= num;
}


// ---------------------------------------------------------------------------
// 関数名:	void moveX( void )
// 引数:	float num
// 戻り値:  なし
// 説明:	プレイヤーの移動関数(X)
// ---------------------------------------------------------------------------
void player::moveX(float num) {

	vector_speed.x += num * speed;

}

// ---------------------------------------------------------------------------
// 関数名:	void moveY( void )
// 引数:	float num
// 戻り値:  なし
// 説明:	プレイヤーの移動関数(Y)
// ---------------------------------------------------------------------------
void player::moveY(float num) {

	vector_speed.y += num * speed;
 
}

// ---------------------------------------------------------------------------
// 関数名:	D3DXVECTOR2 GetPos( void )
// 引数:	void
// 戻り値:  pos
// 説明:	プレイヤーのポジション取得関数
// ---------------------------------------------------------------------------
D3DXVECTOR2 player::GetPos() {

	return pos;

}

// ---------------------------------------------------------------------------
// 関数名:	D3DXVECTOR2 GetPastPos( void )
// 引数:	void
// 戻り値:  past_pos
// 説明:	プレイヤーの１フレーム前ポジション取得関数
// ---------------------------------------------------------------------------
D3DXVECTOR2 player::GetPastPos() {

	return past_pos;

}

// ---------------------------------------------------------------------------
// 関数名:	void PlayerGravity( void )
// 引数:	void
// 戻り値:  なし
// 説明:	プレイヤーの重力関数
// ---------------------------------------------------------------------------
void player::PlayerGravity() {

	
	if (pos.y < DOWN_LIMIT) {
		if (vector_speed.y < GRAVITY_SCALE) {
			vector_speed.y += GRAVITY_SCALE * gravity_correct;

		}

	}
	else if(vector_speed.y >= 0){
		//重力効果で地面に着いたらisJumpをfalseにする
		isJump = false;
	}

	
}

// ---------------------------------------------------------------------------
// 関数名:	void Player_Z_Action( void )
// 引数:	void
// 戻り値:  なし
// 説明:	プレイヤーのジャンプ使用関数
// ---------------------------------------------------------------------------
void player::Player_Z_Action() {

	if (!isJump) Jump();
}

// ---------------------------------------------------------------------------
// 関数名:	void Jump( void )
// 引数:	void
// 戻り値:  なし
// 説明:	プレイヤーのジャンプ関数
// ---------------------------------------------------------------------------
void player::Jump() {

	vector_speed.y -= (JUMP_POWER + JUMP_CORRECT) * jump_correct;
	isJump = true;
}

// ---------------------------------------------------------------------------
// 関数名:	CircleCollision Player_GetCollision( void )
// 引数:	void
// 戻り値:  C
// 説明:	プレイヤーの当たり判定関数(円形、未使用)
// ---------------------------------------------------------------------------
CircleCollision player::Player_GetCollision()
{

	CircleCollision c = {
		{
			pos.x + PLAYER_SIZE* 0.5f,
			pos.y + PLAYER_SIZE * 0.5f
		},PLAYER_SIZE * 0.5f

	};
	return c;

}


// ---------------------------------------------------------------------------
// 関数名:	void ChangePosX( void )
// 引数:	void
// 戻り値:なし
// 説明:	過去ポジション入れ替え関数(X)
// ---------------------------------------------------------------------------
void player::ChangePosX() {

	//前のポジションを今のポジションと入れ替えてる
	pos.x = past_pos.x;

}

// ---------------------------------------------------------------------------
// 関数名:	void ChangePosY( void )
// 引数:	void
// 戻り値:なし
// 説明:	過去のポジション入れ替え関数(Y)
// ---------------------------------------------------------------------------
void player::ChangePosY() {

	//前のポジションを今のポジションと入れ替えてる
	pos.y = past_pos.y;
}

// ---------------------------------------------------------------------------
// 関数名:	void JumpFlagOn( void )
// 引数:	void
// 戻り値:なし
// 説明:	ジャンプフラグ関数(ON)
// ---------------------------------------------------------------------------
void player::JumpFlagOn() {

	isJump = false;
}

// ---------------------------------------------------------------------------
// 関数名:	void JumpFlagOff( void )
// 引数:	void
// 戻り値:なし
// 説明:	ジャンプフラグ関数(OFF)
// ---------------------------------------------------------------------------
void player::JumpFlagOff() {

	isJump = true;
}



